// Function to create a post element and display it
function displayPost(post, containerId, isProfilePage = false) {
    const postsContainer = document.getElementById(containerId);
    if (!postsContainer) return;

    const postElement = document.createElement("div");
    postElement.classList.add("post");
    postElement.setAttribute("data-post-id", post.id);

    let postContent = `
        <div class="post-header">
            <span class="post-user">${post.username}</span>
            <span class="post-timestamp">${post.timestamp}</span>
            ${isProfilePage ? `<button class="delete-btn">ржорзБржЫрзБржи</button>` : ''}
        </div>
        <p>${post.text}</p>
    `;

    if (post.imageUrl) {
        postContent += `<img src="${post.imageUrl}" alt="Post Image" class="post-image">`;
    }

    postElement.innerHTML = postContent;
    postsContainer.prepend(postElement);

    if (isProfilePage) {
        postElement.querySelector('.delete-btn').addEventListener('click', function () {
            deletePost(post.id);
        });
    }
}

// Function to load posts from localStorage
function loadPosts(containerId, userId = null) {
    const allPosts = JSON.parse(localStorage.getItem("userPosts")) || [];
    let postsToDisplay = allPosts;

    if (userId) {
        postsToDisplay = allPosts.filter(post => post.userId === userId);
    }

    const postsContainer = document.getElementById(containerId);
    if (postsContainer) {
        postsContainer.innerHTML = '';
        const isProfilePage = window.location.pathname.includes("profile.html");
        postsToDisplay.forEach(post => displayPost(post, containerId, isProfilePage));
    }
}

// Function to delete a post by its unique ID
function deletePost(postId) {
    let posts = JSON.parse(localStorage.getItem("userPosts")) || [];
    posts = posts.filter(post => post.id != postId);
    localStorage.setItem("userPosts", JSON.stringify(posts));

    const storedUser = JSON.parse(localStorage.getItem("digitalFarmingUser"));
    if (storedUser) {
        loadPosts('posts', storedUser.mobile);
    }
    loadPosts('communityPosts');
    alert("ржкрзЛрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!");
}

// Global Logout button
const logoutButtons = document.querySelectorAll("#logoutBtn");
if (logoutButtons) {
    logoutButtons.forEach(button => {
        button.addEventListener("click", function () {
            localStorage.removeItem("digitalFarmingUser");
            alert("рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓ржЧ ржЖржЙржЯ рж╣ржпрж╝рзЗржЫрзЗржи!");
            window.location.href = "signin.html";
        });
    });
}

// LANDING PAGE LOGIC
if (window.location.pathname.includes("index.html")) {
    window.addEventListener('load', () => {
        loadPosts('communityPosts');
    });
}

// SIGN UP
const signupForm = document.getElementById("signupForm");
if (signupForm) {
    signupForm.addEventListener("submit", function (e) {
        e.preventDefault();

        let fullName = document.getElementById("fullName").value;
        let mobile = document.getElementById("mobile").value;
        let divisionSelect = document.getElementById("division");
        let division = divisionSelect.options[divisionSelect.selectedIndex].textContent; // ржкрж░рж┐ржмрж░рзНрждржи ржПржЦрж╛ржирзЗ
        let district = document.getElementById("district").value;
        let upazila = document.getElementById("upazila").value;
        let password = document.getElementById("password").value;
        let rePassword = document.getElementById("rePassword").value;

        if (password !== rePassword) {
            alert("ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржжрзБржЯрж┐ ржорж┐рж▓ржЫрзЗ ржирж╛!");
            return;
        }

        let user = { fullName, mobile, division, district, upazila, password };
        localStorage.setItem("digitalFarmingUser", JSON.stringify(user));
        alert("ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕рж╛ржЗржи ржЗржи ржХрж░рзБржиред");
        window.location.href = "signin.html";
    });
}

// Division -> District Mapping (Translated to Bangla)
const districtsByDivision = {
    Dhaka: ["ржврж╛ржХрж╛", "ржЧрж╛ржЬрзАржкрзБрж░", "ржХрж┐рж╢рзЛрж░ржЧржЮрзНржЬ", "ржорж╛ржирж┐ржХржЧржЮрзНржЬ", "ржорзБржирзНрж╕рж┐ржЧржЮрзНржЬ", "ржирж╛рж░рж╛ржпрж╝ржгржЧржЮрзНржЬ", "ржирж░рж╕рж┐ржВржжрзА", "ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓", "ржлрж░рж┐ржжржкрзБрж░", "ржЧрзЛржкрж╛рж▓ржЧржЮрзНржЬ", "ржорж╛ржжрж╛рж░рзАржкрзБрж░", "рж░рж╛ржЬржмрж╛ржбрж╝рзА", "рж╢рж░рзАржпрж╝рждржкрзБрж░"],
    Chattogram: ["ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", "ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░", "ржмрж╛ржирзНржжрж░ржмрж╛ржи", "рж░рж╛ржЩрзНржЧрж╛ржорж╛ржЯрж┐", "ржЦрж╛ржЧржбрж╝рж╛ржЫржбрж╝рж┐", "ржирзЛржпрж╝рж╛ржЦрж╛рж▓рзА", "ржлрзЗржирзА", "рж▓ржХрзНрж╖рзНржорзАржкрзБрж░", "ржмрзНрж░рж╛рж╣рзНржоржгржмрж╛ржбрж╝рж┐ржпрж╝рж╛", "ржХрзБржорж┐рж▓рзНрж▓рж╛", "ржЪрж╛ржБржжржкрзБрж░"],
    Khulna: ["ржЦрзБрж▓ржирж╛", "ржмрж╛ржЧрзЗрж░рж╣рж╛ржЯ", "рж╕рж╛рждржХрзНрж╖рзАрж░рж╛", "ржпрж╢рзЛрж░", "ржЭрж┐ржирж╛ржЗржжрж╣", "ржорж╛ржЧрзБрж░рж╛", "ржиржбрж╝рж╛ржЗрж▓", "ржЪрзБржпрж╝рж╛ржбрж╛ржЩрзНржЧрж╛", "ржХрзБрж╖рзНржЯрж┐ржпрж╝рж╛", "ржорзЗрж╣рзЗрж░ржкрзБрж░"],
    Rajshahi: ["рж░рж╛ржЬрж╢рж╛рж╣рзА", "ржкрж╛ржмржирж╛", "рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ", "ржмржЧрзБржбрж╝рж╛", "ржЬржпрж╝ржкрзБрж░рж╣рж╛ржЯ", "ржиржУржЧрж╛ржБ", "ржирж╛ржЯрзЛрж░", "ржЪрж╛ржБржкрж╛ржЗржиржмрж╛ржмржЧржЮрзНржЬ"],
    Barishal: ["ржмрж░рж┐рж╢рж╛рж▓", "ржнрзЛрж▓рж╛", "ржкржЯрзБржпрж╝рж╛ржЦрж╛рж▓рзА", "ржЭрж╛рж▓ржХрж╛ржарж┐", "ржкрж┐рж░рзЛржЬржкрзБрж░", "ржмрж░ржЧрзБржирж╛"],
    Sylhet: ["рж╕рж┐рж▓рзЗржЯ", "рж╣ржмрж┐ржЧржЮрзНржЬ", "ржорзМрж▓ржнрзАржмрж╛ржЬрж╛рж░", "рж╕рзБржирж╛ржоржЧржЮрзНржЬ"],
    Mymensingh: ["ржоржпрж╝ржоржирж╕рж┐ржВрж╣", "ржирзЗрждрзНрж░ржХрзЛржирж╛", "рж╢рзЗрж░ржкрзБрж░", "ржЬрж╛ржорж╛рж▓ржкрзБрж░"],
    Rangpur: ["рж░ржВржкрзБрж░", "ржжрж┐ржирж╛ржЬржкрзБрж░", "ржХрзБржбрж╝рж┐ржЧрзНрж░рж╛ржо", "рж▓рж╛рж▓ржоржирж┐рж░рж╣рж╛ржЯ", "ржЧрж╛ржЗржмрж╛ржирзНржзрж╛", "ржирзАрж▓ржлрж╛ржорж╛рж░рзА", "ржарж╛ржХрзБрж░ржЧрж╛ржБржУ", "ржкржЮрзНржЪржЧржбрж╝"]
};

const divisionSelect = document.getElementById("division");
const districtSelect = document.getElementById("district");

if (divisionSelect && districtSelect) {
    divisionSelect.addEventListener("change", function () {
        const selectedDivision = this.value;
        districtSelect.innerHTML = `<option value="">ржЬрзЗрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>`;

        if (districtsByDivision[selectedDivision]) {
            districtsByDivision[selectedDivision].forEach(district => {
                let option = document.createElement("option");
                option.value = district;
                option.textContent = district;
                districtSelect.appendChild(option);
            });
        }
    });
}

// SIGN IN
const signinForm = document.getElementById("signinForm");
if (signinForm) {
    signinForm.addEventListener("submit", function (e) {
        e.preventDefault();

        let mobile = document.getElementById("loginMobile").value;
        let password = document.getElementById("loginPassword").value;

        let storedUser = JSON.parse(localStorage.getItem("digitalFarmingUser"));

        if (storedUser && storedUser.mobile === mobile && storedUser.password === password) {
            alert("рж╕рзНржмрж╛ржЧрждржо, " + storedUser.fullName + "!");
            window.location.href = "dashboard.html";
        } else {
            alert("ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░ ржмрж╛ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржнрзБрж▓!");
        }
    });
}

// DASHBOARD
if (window.location.pathname.includes("dashboard.html")) {
    const storedUser = JSON.parse(localStorage.getItem("digitalFarmingUser"));
    if (!storedUser) {
        alert("ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ рж▓ржЧ ржЗржи ржХрж░рждрзЗ рж╣ржмрзЗ!");
        window.location.href = "signin.html";
    } else {
        document.getElementById("welcomeMsg").innerText = `ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо, ржХрзГрж╖рж┐ ржмржирзНржзрзБ!, ${storedUser.fullName} ЁЯМ╛`;
        document.getElementById("locationInfo").innerText = `ЁЯУН ржарж┐ржХрж╛ржирж╛: ${storedUser.upazila}, ${storedUser.district}, ${storedUser.division}`;

        const coords = {
            Dhaka: { lat: 23.8103, lon: 90.4125 },
            Chattogram: { lat: 22.3569, lon: 91.7832 },
            Khulna: { lat: 22.8456, lon: 89.5403 },
            Rajshahi: { lat: 24.3745, lon: 88.6042 },
            Barishal: { lat: 22.7010, lon: 90.3535 },
            Sylhet: { lat: 24.8918, lon: 91.8687 },
            Mymensingh: { lat: 24.7471, lon: 90.4203 },
            Rangpur: { lat: 25.7439, lon: 89.2752 }
        };

        const loc = storedUser.division;
        const { lat, lon } = coords[loc] || coords['Dhaka'];

        const weatherEl = document.getElementById("weatherInfo");
        const hourlyContainer = document.getElementById("hourly-forecast-container");

        const weatherCodeMap = {
            0: './icons/sun.png', 1: './icons/sun.png', 2: './icons/rainy.png', 3: './icons/rainy.png',
            45: './icons/rainy.png', 48: './icons/rainy.png', 51: './icons/rainy.png', 53: './icons/rainy.png',
            55: './icons/heavy-rain.png', 56: './icons/rainy.png', 57: './icons/heavy-rain.png',
            61: './icons/rainy.png', 63: './icons/rainy.png', 65: './icons/heavy-rain.png',
            66: './icons/rainy.png', 67: './icons/heavy-rain.png', 71: './icons/snow.png',
            73: './icons/snow.png', 75: './icons/snow.png', 77: './icons/snow.png',
            80: './icons/rainy.png', 81: './icons/rainy.png', 82: './icons/heavy-rain.png',
            85: './icons/snow.png', 86: './icons/snow.png', 95: './icons/storm.png',
            96: './icons/thunderstorm.png', 99: './icons/thunderstorm.png'
        };

        const displayWeatherIcon = (weatherCode) => {
            const iconUrl = weatherCodeMap[weatherCode] || './icons/sun.png';
            return `<img src="${iconUrl}" alt="weather icon" class="weather-icon">`;
        };

        fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m&forecast_days=1`)
            .then(res => res.json())
            .then(data => {
                const currentWeather = data.current_weather;
                const hourlyData = data.hourly;
                const now = new Date();
                const currentHour = now.getHours();
                const todayName = now.toLocaleDateString('bn-BD', { weekday: 'long' });

                weatherEl.innerHTML = `
                    <div class="weather-info-main">
                        <div class="temp-icon">
                            <span class="temp">${Math.round(currentWeather.temperature)}┬░рж╕рзЗ</span>
                            ${displayWeatherIcon(currentWeather.weathercode)}
                        </div>
                        <div class="details">
                            <span>${todayName}</span>
                            <span>ржмрзГрж╖рзНржЯрж┐ржкрж╛рждрзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛: рзж%</span>
                            <span>ржЖрж░рзНржжрзНрж░рждрж╛: ${hourlyData.relative_humidity_2m[currentHour]}%</span>
                            <span>ржмрж╛рждрж╛рж╕: ${currentWeather.windspeed} ржХрж┐ржорж┐/ржШржирзНржЯрж╛</span>
                        </div>
                    </div>
                `;

                hourlyContainer.innerHTML = '';
                for (let i = 0; i < hourlyData.time.length; i++) {
                    const time = new Date(hourlyData.time[i]);
                    const hour = time.getHours();
                    const temp = Math.round(hourlyData.temperature_2m[i]);
                    const weatherCode = hourlyData.weather_code[i];
                    const hourlyCard = document.createElement('div');
                    hourlyCard.classList.add('hourly-card');
                    hourlyCard.innerHTML = `
                        <span>${i === 0 ? 'ржПржЦржи' : `${hour}:00`}</span>
                        ${displayWeatherIcon(weatherCode)}
                        <span class="temp-range">${temp}┬░</span>
                    `;
                    hourlyContainer.appendChild(hourlyCard);
                }
            })
            .catch(err => {
                weatherEl.innerHTML = `<p>ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржп рж▓рзЛржб ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржпрж╝ржирж┐ред</p>`;
                console.error(err);
            });

        const newsFeedEl = document.getElementById("newsFeed");
        const bangladeshFarmingNews = [
            { title: "ржлрж╕рж▓ рж╕ржВржХрзНрж░рж╛ржирзНржд ржЦржмрж░", summary: "ржзрж╛ржи, ржЧржо, ржнрзБржЯрзНржЯрж╛, рж╕ржмржЬрж┐, ржлрж▓ржорзВрж▓рзЗрж░ ржмрж╛ржЬрж╛рж░ржорзВрж▓рзНржпред", url: "https://chaldal.com/fresh-vegetable" },
            { title: "ржПржЗ ржорзМрж╕рзБржорзЗ рж░рзЗржХрж░рзНржб ржкрж╛ржЯ ржЙрзОржкрж╛ржжржирзЗрж░ ржЖрж╢рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ", summary: "ржЕржирзБржХрзВрж▓ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржПржмржВ ржЖржзрзБржирж┐ржХ ржЪрж╛рж╖ ржкржжрзНржзрждрж┐рж░ ржХрж╛рж░ржгрзЗ ржкрж╛ржЯрзЗрж░ рж░рзЗржХрж░рзНржб ржлрж▓ржирзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛ ржжрзЗржЦрж╛ ржжрж┐ржпрж╝рзЗржЫрзЗ, ржпрж╛ рж╕рзНржерж╛ржирзАржпрж╝ ржЕрж░рзНржержирзАрждрж┐ржХрзЗ ржЪрж╛ржЩрзНржЧрж╛ ржХрж░ржмрзЗред", url: "https://www.facebook.com/" },
            { title: "ржирждрзБржи ржорзЛржмрж╛ржЗрж▓ ржЕрзНржпрж╛ржк ржХрзГрж╖ржХржжрзЗрж░ ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ржпрж╝ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░ржЫрзЗ", summary: "ржПржХржЯрж┐ рж╕рзНржерж╛ржирзАржпрж╝ ржкрзНрж░ржпрзБржХрзНрждрж┐ рж╕ржВрж╕рзНржерж╛ ржПржХржЯрж┐ ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗ ржпрж╛ ржЫржмрж┐рж░ ржорж╛ржзрзНржпржорзЗ рж╕рж╛ржзрж╛рж░ржг ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ рж╢ржирж╛ржХрзНржд ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржПржмржВ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕ржорж╛ржзрж╛ржи ржУ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред", url: "https://www.facebook.com/" }
        ];
        newsFeedEl.innerHTML = '';
        bangladeshFarmingNews.forEach(news => {
            const newsCard = document.createElement('div');
            newsCard.className = 'news-card';
            newsCard.innerHTML = `<h4><a href="${news.url}" target="_blank">${news.title}</a></h4><p>${news.summary}</p>`;
            newsFeedEl.appendChild(newsCard);
        });

        const soilInfo = "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржорж╛ржЯрж┐ ржорзВрж▓ржд ржЖрж▓рзБржнрж┐ржпрж╝рж╛рж▓, ржЙрж░рзНржмрж░ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи ржлрж╕рж▓рзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНрждред рждржмрзЗ ржЖржЮрзНржЪрж▓рж┐ржХ ржкрж╛рж░рзНржержХрзНржп рж░ржпрж╝рзЗржЫрзЗ, ржпрзЗржоржи ржмрж╛рж░рж┐ржирзНржж ржЯрзНрж░рзНржпрж╛ржХрзНржЯрзЗрж░ рж▓рж╛рж▓ ржорж╛ржЯрж┐ред ржкрзБрж╖рзНржЯрж┐ ржШрж╛ржЯрждрж┐ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рждрзЗ ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝ред";
        const chemicalInfo = "ржзрж╛ржирзЗрж░ ржЬржирзНржп, рж╕рзБрж╖ржо NPK рж╕рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЙржЪрж┐рждред ржкрзНрж░рждрж┐ржЯрж┐ ржЕржЮрзНржЪрж▓рзЗрж░ рж╕рж╛ржзрж╛рж░ржг ржХрзАржЯржкрждржЩрзНржЧ ржЕржирзБржпрж╛ржпрж╝рзА ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзАржЯржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ рж╕ржорзНржкрзНрж░рж╕рж╛рж░ржг ржЕржлрж┐рж╕рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред рж╕ржмрж╕ржоржпрж╝ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛ ржорзЗржирзЗ ржЪрж▓рзБржиред";
        const seasonalCropInfo = {
            'Rabi (рж╢рзАрждржХрж╛рж▓)': 'ржмрж░рзЛ ржзрж╛ржи, ржЧржо, ржЖрж▓рзБ, ржнрзБржЯрзНржЯрж╛, ржбрж╛рж▓ (ржорж╕рзБрж░, ржЫрзЛрж▓рж╛)',
            'Kharif-1 (ржкрзНрж░рж┐-ржоржирзНрж╕рзБржи)': 'ржЖржЙрж╕ ржзрж╛ржи, ржкрж╛ржЯ, ржорзБржЧ ржбрж╛рж▓',
            'Kharif-2 (ржмрж░рзНрж╖рж╛ржХрж╛рж▓)': 'ржЖржоржи ржзрж╛ржи, ржЪрж┐ржирж┐ ржЖржЦ, ржЯрж┐-ржЖржоржи ржзрж╛ржи'
        };
        const getSeasonalInfo = () => {
            const date = new Date();
            const month = date.getMonth() + 1;
            if (month >= 11 || month <= 2) return `**рж░ржмрж┐ (рж╢рзАрждржХрж╛рж▓):** ${seasonalCropInfo['Rabi (рж╢рзАрждржХрж╛рж▓)']}`;
            if (month >= 3 && month <= 6) return `**ржЦрж░рж┐ржл-рзз (ржкрзНрж░рж┐-ржоржирзНрж╕рзБржи):** ${seasonalCropInfo['Kharif-1 (ржкрзНрж░рж┐-ржоржирзНрж╕рзБржи)']}`;
            return `**ржЦрж░рж┐ржл-рзи (ржмрж░рзНрж╖рж╛ржХрж╛рж▓):** ${seasonalCropInfo['Kharif-2 (ржмрж░рзНрж╖рж╛ржХрж╛рж▓)']}`;
        };
        document.getElementById('soilInfo').innerHTML = soilInfo;
        document.getElementById('chemicalInfo').innerHTML = chemicalInfo;
        document.getElementById('seasonalCropInfo').innerHTML = getSeasonalInfo();
    }
}

// PROFILE PAGE LOGIC
if (window.location.pathname.includes("profile.html")) {
    const storedUser = JSON.parse(localStorage.getItem("digitalFarmingUser"));
    const postForm = document.getElementById("postForm");
    const profileImageInput = document.getElementById("profileImageInput");
    const profilePhoto = document.getElementById("profilePhoto");

    if (!storedUser) {
        alert("ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ рж▓ржЧ ржЗржи ржХрж░рждрзЗ рж╣ржмрзЗ!");
        window.location.href = "signin.html";
    } else {
        document.getElementById("profileName").innerText = storedUser.fullName;
        document.getElementById("profileMobile").innerText = storedUser.mobile;
        document.getElementById("profileUpazila").innerText = storedUser.upazila;
        document.getElementById("profileDistrict").innerText = storedUser.district;
        document.getElementById("profileDivision").innerText = storedUser.division;

        const storedProfilePic = localStorage.getItem("profilePic_" + storedUser.mobile);
        if (storedProfilePic) {
            profilePhoto.src = storedProfilePic;
        }

        profileImageInput.addEventListener("change", function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePhoto.src = e.target.result;
                    localStorage.setItem("profilePic_" + storedUser.mobile, e.target.result);
                };
                reader.readAsDataURL(file);
            }
        });

        loadPosts('posts', storedUser.mobile);

        postForm.addEventListener("submit", function (e) {
            e.preventDefault();
            const postText = document.getElementById("postText").value;
            const postImageFile = document.getElementById("postImage").files[0];

            const newPost = {
                id: Date.now(),
                userId: storedUser.mobile,
                username: storedUser.fullName,
                text: postText,
                timestamp: new Date().toLocaleString(),
                imageUrl: null
            };

            if (postImageFile) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    newPost.imageUrl = event.target.result;
                    saveAndDisplayPost(newPost);
                };
                reader.readAsDataURL(postImageFile);
            } else {
                saveAndDisplayPost(newPost);
            }
            postForm.reset();
        });
    }
}

// Function to save and display a post
function saveAndDisplayPost(post) {
    const posts = JSON.parse(localStorage.getItem("userPosts")) || [];
    posts.push(post);
    localStorage.setItem("userPosts", JSON.stringify(posts));

    const storedUser = JSON.parse(localStorage.getItem("digitalFarmingUser"));
    if (storedUser) {
        loadPosts('posts', storedUser.mobile);
    }
    loadPosts('communityPosts');
}